import Point from "./Point";
import Circle from "./Circle";
import GeomObject from "./base/GeomObject";
import { CanvasDirective, GraphicImplType, SvgDirective } from "./types";
import Transformation from "./transformation";
import Geomtoy from ".";
declare class Triangle extends GeomObject {
    #private;
    constructor(owner: Geomtoy, point1X: number, point1Y: number, point2X: number, point2Y: number, point3X: number, point3Y: number);
    constructor(owner: Geomtoy, point1Coordinate: [number, number], point2Coordinate: [number, number], point3Coordinate: [number, number]);
    constructor(owner: Geomtoy, point1: Point, point2: Point, point3: Point);
    get name(): string;
    get uuid(): string;
    get point1X(): number;
    set point1X(value: number);
    get point1Y(): number;
    set point1Y(value: number);
    get point1Coordinate(): [number, number];
    set point1Coordinate(value: [number, number]);
    get point1(): Point;
    set point1(value: Point);
    get point2X(): number;
    set point2X(value: number);
    get point2Y(): number;
    set point2Y(value: number);
    get point2Coordinate(): [number, number];
    set point2Coordinate(value: [number, number]);
    get point2(): Point;
    set point2(value: Point);
    get point3X(): number;
    set point3X(value: number);
    get point3Y(): number;
    set point3Y(value: number);
    get point3Coordinate(): [number, number];
    set point3Coordinate(value: [number, number]);
    get point3(): Point;
    set point3(value: Point);
    getInscribedCircle(): Circle;
    getEscribedCircles(): void;
    getCircumscribedCircle(): void;
    getArea(signed?: boolean): number;
    getCentroidPoint(): Point;
    getCircumscribedCircleCenterPoint(): Point;
    getOrthoCenterPoint(): Point;
    apply(transformation: Transformation): GeomObject;
    clone(): GeomObject;
    toString(): string;
    toObject(): object;
    toArray(): any[];
    getGraphic(type: GraphicImplType): (SvgDirective | CanvasDirective)[];
}
export default Triangle;
