import Point from "./Point";
import Circle from "./Circle";
import Line from "./Line";
import { CanvasDirective, GraphicImplType, SvgDirective } from "./types";
import GeomObject from "./base/GeomObject";
import { AreaMeasurable } from "./interfaces";
import Transformation from "./transformation";
import Geomtoy from ".";
declare class RegularPolygon extends GeomObject implements AreaMeasurable {
    #private;
    constructor(owner: Geomtoy, radius: number, centerX: number, centerY: number, sideCount: number, rotation?: number);
    constructor(owner: Geomtoy, radius: number, centerCoordinate: [number, number], sideCount: number, rotation?: number);
    constructor(owner: Geomtoy, radius: number, centerPosition: Point, sideCount: number, rotation?: number);
    get centerX(): number;
    set centerX(value: number);
    get centerY(): number;
    set centerY(value: number);
    get centerCoordinate(): [number, number];
    set centerCoordinate(value: [number, number]);
    get centerPoint(): Point;
    set centerPoint(value: Point);
    get radius(): number;
    set radius(value: number);
    get sideCount(): number;
    set sideCount(value: number);
    get rotation(): number;
    set rotation(value: number);
    get apothem(): number;
    get sideLength(): number;
    get centralAngle(): number;
    get interiorAngle(): number;
    get sumOfInteriorAngle(): number;
    get exteriorAngle(): number;
    get sumOfExteriorAngle(): number;
    get diagonalCount(): number;
    static fromApothemEtc(owner: Geomtoy, apothem: number, centerPoint: Point, sideCount: number, rotation?: number): RegularPolygon;
    static fromSideLengthEtc(owner: Geomtoy, sideLength: number, centerPoint: Point, sideCount: number, rotation?: number): RegularPolygon;
    getPoints(): Point[];
    getLines(): Line[];
    getCircumscribedCircle(): Circle;
    getInscribedCircle(): Circle;
    getPerimeter(): number;
    getArea(): number;
    apply(transformation: Transformation): GeomObject;
    clone(): RegularPolygon;
    toString(): string;
    toObject(): object;
    toArray(): any[];
    getGraphic(type: GraphicImplType): (SvgDirective | CanvasDirective)[];
}
export default RegularPolygon;
